package fetcher

import (
	"reflect"
	"testing"
)

func Test_splitTrickestMD(t *testing.T) {
	type expected struct {
		cveHTML  string
		descHTML string
		pocHTML  string
	}

	var tests = []struct {
		in       string
		expected expected
	}{
		{
			in: `### [CVE-1999-0001](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0001)
![](https://img.shields.io/static/v1?label=Product&message=n%2Fa&color=blue)
![](https://img.shields.io/static/v1?label=Version&message=n%2Fa&color=blue)
![](https://img.shields.io/static/v1?label=Vulnerability&message=n%2Fa&color=brighgreen)
			
### Description
			
ip_input.c in BSD-derived TCP/IP implementations allows remote attackers to cause a denial of service (crash or hang) via crafted packets.
			
### POC
			
#### Reference
No PoCs from references.
			
#### Github
- https://github.com/flowground/anchore-io-connector
- https://github.com/jimmyislive/gocve
- https://github.com/quentinmayo/get_nvd_data_from_online_to_csv
			
`,
			expected: expected{
				cveHTML:  `<h3><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0001">CVE-1999-0001</a></h3><p><img src="https://img.shields.io/static/v1?label=Product&amp;message=n%2Fa&amp;color=blue" alt="" /><img src="https://img.shields.io/static/v1?label=Version&amp;message=n%2Fa&amp;color=blue" alt="" /><img src="https://img.shields.io/static/v1?label=Vulnerability&amp;message=n%2Fa&amp;color=brighgreen" alt="" /></p>`,
				descHTML: `<h3>Description</h3><p>ip_input.c in BSD-derived TCP/IP implementations allows remote attackers to cause a denial of service (crash or hang) via crafted packets.</p>`,
				pocHTML:  `<h3>POC</h3><h4>Reference</h4><p>No PoCs from references.</p><h4>Github</h4><ul><li><a href="https://github.com/flowground/anchore-io-connector">https://github.com/flowground/anchore-io-connector</a></li><li><a href="https://github.com/jimmyislive/gocve">https://github.com/jimmyislive/gocve</a></li><li><a href="https://github.com/quentinmayo/get_nvd_data_from_online_to_csv">https://github.com/quentinmayo/get_nvd_data_from_online_to_csv</a></li></ul>`,
			},
		},
	}
	for i, tt := range tests {
		cve, desc, poc := splitTrickestMD([]byte(tt.in))
		if cve != tt.expected.cveHTML {
			t.Errorf("[%d] splitTrickestMD expected CVE: %s\n  actual: %s\n", i, tt.expected.cveHTML, cve)
		}
		if desc != tt.expected.descHTML {
			t.Errorf("[%d] splitTrickestMD expected Desciption: %s\n  actual: %s\n", i, tt.expected.descHTML, desc)
		}
		if poc != tt.expected.pocHTML {
			t.Errorf("[%d] splitTrickestMD expected PoC: %s\n  actual: %s\n", i, tt.expected.pocHTML, poc)
		}
	}
}

func Test_readTrickestHTML(t *testing.T) {
	type args struct {
		cveHTML  string
		descHTML string
		pocHTML  string
	}

	var tests = []struct {
		in       args
		expected trickestCVE
	}{
		{
			in: args{
				cveHTML:  `<h3><a href="https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-1999-0001">CVE-1999-0001</a></h3><p><img src="https://img.shields.io/static/v1?label=Product&amp;message=n%2Fa&amp;color=blue" alt="" /><img src="https://img.shields.io/static/v1?label=Version&amp;message=n%2Fa&amp;color=blue" alt="" /><img src="https://img.shields.io/static/v1?label=Vulnerability&amp;message=n%2Fa&amp;color=brighgreen" alt="" /></p>`,
				descHTML: `<h3>Description</h3><p>ip_input.c in BSD-derived TCP/IP implementations allows remote attackers to cause a denial of service (crash or hang) via crafted packets.</p>`,
				pocHTML:  `<h3>POC</h3><h4>Reference</h4><p>No PoCs from references.</p><h4>Github</h4><ul><li><a href="https://github.com/flowground/anchore-io-connector">https://github.com/flowground/anchore-io-connector</a></li><li><a href="https://github.com/jimmyislive/gocve">https://github.com/jimmyislive/gocve</a></li><li><a href="https://github.com/quentinmayo/get_nvd_data_from_online_to_csv">https://github.com/quentinmayo/get_nvd_data_from_online_to_csv</a></li></ul>`,
			},
			expected: trickestCVE{
				CVEID:           "CVE-1999-0001",
				Description:     "ip_input.c in BSD-derived TCP/IP implementations allows remote attackers to cause a denial of service (crash or hang) via crafted packets.",
				Products:        []string{"n/a"},
				Versions:        []string{"n/a"},
				Vulnerabilities: []string{"n/a"},
				PoCs:            []string{"https://github.com/flowground/anchore-io-connector", "https://github.com/jimmyislive/gocve", "https://github.com/quentinmayo/get_nvd_data_from_online_to_csv"},
			},
		},
	}
	for i, tt := range tests {
		trickestCVE, err := readTrickestHTML(tt.in.cveHTML, tt.in.descHTML, tt.in.pocHTML)
		if err != nil {
			t.Errorf("[%d] readTrickestHTML error: %s\n", i, err)
			continue
		}
		if !reflect.DeepEqual(trickestCVE, tt.expected) {
			t.Errorf("[%d] readTrickestHTML expected: %#v\n  actual: %#v\n", i, tt.expected, trickestCVE)
		}
	}
}
